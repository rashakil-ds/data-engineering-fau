pipeline WeatherDataPipeline {

    // pipeline flow
    FetchDataZip
        -> ExtractArchiveContents
        -> SelectCSVFile
        -> ReadCSVData
        -> ParseCSV
        -> RenameHeaders
        -> ValidateDataColumns
        -> TransformTemperatureToFahrenheit
        -> TransformBatteryTempToFahrenheit
        -> SaveToSQLite;

    //  Download the ZIP file
    block FetchDataZip oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    // Extract the archive contents
    block ExtractArchiveContents oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    // Select the CSV file named "data.csv"
    block SelectCSVFile oftype FilePicker {
        path: "/data.csv";
    }

    // Read the raw text from the CSV file
    block ReadCSVData oftype TextFileInterpreter {}

    // Parse the CSV content into a structured table
    block ParseCSV oftype CSVInterpreter {
        delimiter: ";"; // Use semicolon as delimiter
    }

    // Rename headers from German to English
    block RenameHeaders oftype CellWriter {
        at: range A1:F1; 
        write: [
            "id",
            "producer",
            "model",
            "month",
            "temperature",
            "battery_temperature"
        ];
    }

    // Validate columns with appropriate constraints
    block ValidateDataColumns oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype IdType,                  
            "producer" oftype text,             
            "model" oftype text,                
            "month" oftype MonthValidator,      
            "temperature" oftype decimal,       
            "battery_temperature" oftype decimal 
        ];
    }

    // Reusable transform: Celsius to Fahrenheit
    transform CelsiusToFahrenheit {
        from celsius oftype decimal;
        to fahrenheit oftype decimal;

        fahrenheit: 32 + ((celsius * 9) / 5);
    }

    // Transform "temperature" column to Fahrenheit
    block TransformTemperatureToFahrenheit oftype TableTransformer {
        inputColumns: ["temperature"];
        outputColumn: "temperature"; // Overwrite the same column
        uses: CelsiusToFahrenheit;
    }

    // Transform "battery_temperature" column to Fahrenheit
    block TransformBatteryTempToFahrenheit oftype TableTransformer {
        inputColumns: ["battery_temperature"];
        outputColumn: "battery_temperature"; // Overwrite the same column
        uses: CelsiusToFahrenheit;
    }

    // Define reusable constraint for month validation
    constraint ValidMonthConstraint oftype RangeConstraint {
        lowerBound: 1;
        lowerBoundInclusive: true;
        upperBound: 12;
        upperBoundInclusive: true;
    }

    // Define reusable constraint for id validation
    constraint IdGreaterThanZeroConstraint oftype GreaterThanConstraint {
        lowerBound: 0;
    }

    // Define value types for validation
    valuetype MonthValidator oftype integer {
        constraints: [ValidMonthConstraint];
    }

    valuetype IdType oftype integer {
        constraints: [IdGreaterThanZeroConstraint];
    }

    //  Save the processed data into SQLite database
    block SaveToSQLite oftype SQLiteLoader {
        table: "temperatures";         
        file: "./temperatures.sqlite";
    }
}
