pipeline TempDataPipeline {

    ZipFileFetch 
        -> ArchiveExtract
        -> SelectorCSVFile 
        -> TextLoader
        -> InterpretorCSV
        -> UpdateBatteryCol
        -> HeadersUpdate
        -> IntegrityCheck
        -> TransformTempData
        -> BatteryTempTransform
        -> ProcessedDataToSQLite;

    // Download the ZIP 
    block ZipFileFetch oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    // Extract 
    block ArchiveExtract oftype ArchiveInterpreter {
        archiveType: "zip";
    }

  
    block SelectorCSVFile oftype FilePicker {
        path: "/data.csv";
    }

    block TextLoader oftype TextFileInterpreter {}

    block InterpretorCSV oftype CSVInterpreter {
        delimiter: ";"; // Use semicolon as delimiter
    }

    block UpdateBatteryCol oftype CellWriter {
        at: cell J1; 
        write: ["battery_temperature"];
    }

    block HeadersUpdate oftype CellWriter {
        at: range A1:E1; 
        write: ["id", "producer", "model", "month", "temperature"];
    }

   
    block IntegrityCheck oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype integer,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype month,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    
    transform ConvertCelsiusToFahrenheit {
        from CelsiusValue oftype decimal;
        to FahrenheitValue oftype decimal;

        FahrenheitValue: 32 + ((CelsiusValue * 9) / 5);
    }

  
    block TransformTempData oftype TableTransformer {
        inputColumns: ["temperature"];
        outputColumn: "temperature";
        uses: ConvertCelsiusToFahrenheit;
    }

    
    block BatteryTempTransform oftype TableTransformer {
        inputColumns: ["battery_temperature"];
        outputColumn: "battery_temperature";
        uses: ConvertCelsiusToFahrenheit;
    }

    constraint MonthRange oftype RangeConstraint {
        lowerBound: 1;
        lowerBoundInclusive: true;
        upperBound: 12;
        upperBoundInclusive: true;
    }

    valuetype month oftype integer {
        constraints:[MonthRange];
    }


    block ProcessedDataToSQLite oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }




}