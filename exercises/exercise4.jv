pipeline ClimateDataProcessingPipeline {

    // Define the pipeline flow
    StartDownload
        -> DecompressZip
        -> LocateCSVFile
        -> ReadCSVContent
        -> ParseCSV
        -> RenameBatteryTempColumn
        -> RenameHeaders
        -> ValidateTable
        -> TransformAmbientTemperature
        -> TransformBatteryTemperature
        -> SaveToDatabase;

    // Step 1: Download the ZIP file containing the data
    block StartDownload oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    // Step 2: Decompress the ZIP archive
    block DecompressZip oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    // Step 3: Locate the required CSV file within the archive
    block LocateCSVFile oftype FilePicker {
        path: "/data.csv";
    }

    // Step 4: Read the raw CSV content
    block ReadCSVContent oftype TextFileInterpreter {}

    // Step 5: Parse the raw CSV into a structured format
    block ParseCSV oftype CSVInterpreter {
        delimiter: ";"; // Semicolon used as a delimiter in German datasets
    }

    // Step 6: Rename the battery temperature column header to English
    block RenameBatteryTempColumn oftype CellWriter {
        at: cell J1;
        write: ["battery_temperature"];
    }

    // Step 7: Rename all headers to English for clarity
    block RenameHeaders oftype CellWriter {
        at: range A1:E1;
        write: ["device_id", "manufacturer", "model", "month", "ambient_temperature"];
    }

    // Step 8: Validate data integrity with defined column types and constraints
    block ValidateTable oftype TableInterpreter {
        header: true;
        columns: [
            "device_id" oftype integer,
            "manufacturer" oftype text,
            "model" oftype text,
            "month" oftype ValidMonth, // Validates month as 1â€“12
            "ambient_temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    // Define reusable transformation: Celsius to Fahrenheit
    transform CelsiusToFahrenheit {
        from celsius oftype decimal;
        to fahrenheit oftype decimal;

        fahrenheit: 32 + ((celsius * 9) / 5);
    }

    // Step 9: Transform the ambient temperature to Fahrenheit and save to a new column
    block TransformAmbientTemperature oftype TableTransformer {
        inputColumns: ["ambient_temperature"];
        outputColumn: "ambient_temperature_fahrenheit"; // New column for Fahrenheit values
        uses: CelsiusToFahrenheit;
    }

    // Step 10: Transform the battery temperature to Fahrenheit and save to a new column
    block TransformBatteryTemperature oftype TableTransformer {
        inputColumns: ["battery_temperature"];
        outputColumn: "battery_temperature_fahrenheit"; // New column for Fahrenheit values
        uses: CelsiusToFahrenheit;
    }

    // Define a constraint for valid month values (1 to 12)
    constraint ValidMonthConstraint oftype RangeConstraint {
        lowerBound: 1;
        lowerBoundInclusive: true;
        upperBound: 12;
        upperBoundInclusive: true;
    }

    // Define a custom value type for month validation
    valuetype ValidMonth oftype integer {
        constraints: [ValidMonthConstraint];
    }

    // Step 11: Save the processed data to an SQLite database
    block SaveToDatabase oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }
}
